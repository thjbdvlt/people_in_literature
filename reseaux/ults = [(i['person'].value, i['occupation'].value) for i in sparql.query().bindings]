Help on Bindings in module SPARQLWrapper.SmartWrapper object:

class BBiinnddiinnggss(builtins.object)
 |  Bindings(retval: SPARQLWrapper.Wrapper.QueryResult)
 |  
 |  Class encapsulating one query result, based on the JSON return format. It decodes the
 |  return values to make it a bit more usable for a standard usage. The class consumes the
 |  return value and instantiates a number of attributes that can be consulted directly. See
 |  the list of variables.
 |  
 |  The `Serializing SPARQL Query Results in JSON <http://www.w3.org/TR/rdf-sparql-json-res/>`_ explains the details of
 |  the JSON return structures. Very succinctly: the return data has "bindings", which means a list of dictionaries.
 |  Each dictionary is a possible binding of the SELECT variables to :class:`Value` instances. This structure is made a
 |  bit more usable by this class.
 |  
 |  :ivar fullResult: The original dictionary of the results, stored for an easier reference.
 |  :vartype fullResult: dict
 |  :ivar head: Header part of the return, see the JSON return format document for details.
 |  :vartype head: dict
 |  :ivar variables: List of unbounds (variables) of the original query. It is a list of strings. ``None`` in the case
 |                      of an ASK query.
 |  :vartype variables: list
 |  :ivar bindings: The final bindings: list of dictionaries, mapping variables to :class:`Value` instances.     If unbound, then no value is set in the dictionary; that can be easily checked with     ``var in res.bindings[..]``, for example.
 |  :vartype bindings: list
 |  :ivar askResult: by default, set to **False**; in case of an ASK query, the result of the query.
 |  :vartype askResult: bool
 |  
 |  Methods defined here:
 |  
 |  ____ccoonnttaaiinnss____(self, key: Union[str, List[str], Tuple[str]]) -> bool
 |      Emulation of the "``key in obj``" operator. Key can be a string for a variable or an array/tuple
 |      of strings.
 |      
 |      If ``key`` is a variable, the return value is ``True`` if there is at least one binding where ``key`` is
 |      bound. If ``key`` is an array or tuple, the return value is ``True`` if there is at least one binding
 |      where *all* variables in ``key`` are bound.
 |      
 |      :param key: possible variable, or array/tuple of variables
 |      :return: whether there is a binding of the variable in the return
 |      :rtype: Boolean
 |  
 |  ____ggeettiitteemm____(self, key: Union[slice, str, List[str]]) -> List[Dict[str, SPARQLWrapper.SmartWrapper.Value]]
 |      Emulation of the ``obj[key]`` operator.  Slice notation is also available.
 |      The goal is to choose the right bindings among the available ones. The return values are always
 |      arrays  of bindings, ie, arrays of dictionaries mapping variable keys to :class:`Value` instances.
 |      The different value settings mean the followings:
 |      
 |       - ``obj[key]`` returns the bindings where ``key`` has a valid value
 |       - ``obj[key1,key2,...]`` returns the bindings where *all* ``key1,key2,...`` have valid values
 |       - ``obj[(key1,key2,...):(nkey1,nkey2,...)]`` returns the bindings where all ``key1,key2,...`` have
 |       valid values and *none* of the ``nkey1,nkey2,...`` have valid values
 |       - ``obj[:(nkey1,nkey2,...)]`` returns the bindings where *none* of the ``nkey1,nkey2,...`` have valid values
 |      
 |      In all cases complete bindings are returned, ie, the values for other variables, not present among
 |      the keys in the call, may or may not be present depending on the query results.
 |      
 |      :param key: possible variable or array/tuple of keys with possible slice notation
 |      :return: list of bindings
 |      :rtype: array of variable -> :class:`Value`  dictionaries
 |  
 |  ____iinniitt____(self, retval: SPARQLWrapper.Wrapper.QueryResult)
 |      :param retval: the query result.
 |      :type retval: :class:`QueryResult<SPARQLWrapper.Wrapper.QueryResult>`
 |  
 |  ccoonnvveerrtt(self) -> 'Bindings'
 |      This is just a convenience method, returns ``self``.
 |      
 |      Although :class:`SPARQLWrapper2.Bindings` is not a subclass of
 |      :class:`SPARQLWrapper.QueryResult<SPARQLWrapper.Wrapper.QueryResult>`, it is returned as a result by
 |      :func:`SPARQLWrapper2.query`, just like :class:`QueryResult<SPARQLWrapper.Wrapper.QueryResult>` is returned by
 |      :func:`SPARQLWrapper.query()<SPARQLWrapper.Wrapper.SPARQLWrapper.query>`. Consequently,
 |      having an empty :func:`convert` method to imitate
 |      :class:`QueryResult's convert() method<SPARQLWrapper.Wrapper.QueryResult.convert>`
 |      may avoid unnecessary problems.
 |  
 |  ggeettVVaalluueess(self, key: str) -> Optional[List[SPARQLWrapper.SmartWrapper.Value]]
 |      A shorthand for the retrieval of all bindings for a single key. It is
 |      equivalent to ``[b[key] for b in self[key]]``
 |      
 |      :param key: possible variable name.
 |      :type key: string
 |      :return: list of :class:`Value` instances.
 |      :rtype: list
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
